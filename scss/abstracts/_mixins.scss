//CONTAINER
// Map with Container Max-widths
$container-max-widths: (
  x-sm: 375px,
  sm: 502px,
  md: 768px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);


@mixin container{
    margin: 0 auto;
    max-width: map-get($container-max-widths, xxl);
    padding: 0rem 5.625rem 0rem 5.625rem;

    @include respond-to(md){
        padding: 0rem 2.5rem 0rem 2.5rem;
    }

    @include respond-to(sm){
        padding: 0rem 1.5rem 0rem 1.5rem;
    }

    @include respond-to(x-sm){
        padding: 0rem 1rem 0rem 1rem;
    }
}

@mixin container-fluid{
  margin: 0 auto;
  max-width: 99.9%;
  padding: 0rem .25rem 0rem .25rem;
}

/// Container's maximum width
/// @type Length
$max-width: 66.25rem !default;
$layout-padding: 0rem 2.5rem 0rem 2.5rem !default;



// ===== Usage ===== //
//@include container-fluid;
//@include container;



//BREAKPOINT MANAGER
// Map with breakpoints
$breakpoints: (
    'xxs': 23rem,  // 375px
    'xs': 30rem,   // 480px
    'sm': 48rem,   // 768px
    'md': 62rem,   // 992px
    'lg': 75rem,   // 1200px
    'xl': 90rem    // 1440px
) !default;


// Respond-To Mixin
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
      // Retrieves the value from the key
      $value: map-get($breakpoints, $breakpoint);
      
      // If the key exists in the map
      @if $value != null {
            
        // Prints a media query based on the value
        @media screen and (max-width: $value) {
            @content;
        }
      }
  }
   
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

// ===== Usage ===== //
//@include respond-to(xxs){}
//@include respond-to(xs){}
//@include respond-to(sm){}
//@include respond-to(md){}
//@include respond-to(lg){}
//@include respond-to(xl){}



//FLEX-BOX TOOLKIT
@mixin flex-column {
    display: flex;
    flex-direction: column;
  }
  
  @mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  @mixin flex-center-column {
    @include flex-center;
    flex-direction: column;
  }
  
  @mixin flex-center-vert {
    display: flex;
    align-items: center;
  }
  
  @mixin flex-center-horiz {
    display: flex;
    justify-content: center;
  }

// ===== Usage ===== //
//   @include flex-column;
//   @include flex-center;
//   @include flex-center-column;
//   @include flex-center-vert;
//   @include flex-center-horiz;



//PSEUDO ELEMENTS 
@mixin pseudo(
  $width: 100%,
  $height: 100%,
  $display: inline-block,
  $position: absolute,
  $content: ""
) {
  content: $content;
  display: $display;
  position: $pos;
  @include box($width, $height);
}

// ===== Usage ===== //
//   @include pseudo(width:, height:);


//DIMENSIONS 
@mixin box($width, $height: $width) {
    width: $width;
    height: $height;
}

// ===== Usage ===== //
//   @include box(width: );
//   @include box(width:, height:);



//RETINA IMAGES
@mixin retina-images($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
           (-o-min-device-pixel-ratio: 2.6/2),
           (-webkit-min-device-pixel-ratio: 1.3),
           (min-device-pixel-ratio: 1.3),
           (min-resolution: 1.3dppx) {
      /* on retina, use image that's scaled by 2 */
      background-image: url($image);
      background-size: $width $height;
    }
}

// ===== Usage ===== //
//   @include retina-images("url", width, height);
